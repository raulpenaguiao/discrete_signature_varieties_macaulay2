-- d = 1
-- h = 3
-- N = 3
restart
R = QQ[a1,b1,c1,
s00, s01, s10, s11,
Degrees => {3:1,4:1},
MonomialOrder => Eliminate 3];
vrbs = {a1, b1, c1};

-- auxiliary functions
isVar = var -> member(var, vrbs);
hasNoVar = p -> (
    0 == number(support p, isVar)
);


I = ideal(
s00-a1*b1*c1,
s10-a1*a1*b1-a1*a1*c1-b1*b1*c1,
s01-a1*b1*b1-a1*c1*c1-b1*c1*c1,
s11-a1*a1*a1-b1*b1*b1-c1*c1*c1);

dim I -- dim = 3
degree I -- deg = 27 = 3**3
g = groebnerBasis I;
l = numColumns g;
L = for i from 0 to l-1 list (g_i)_0;
L = select(L, hasNoVar);
length L -- 1 generator of V133
toString L_0 -- 81*s00^9+162*s00^8*s01+351*s00^7*s01^2+333*s00^6*s01^3+72*s00^5*s01^4-63*s00^4*s01^5-30*s00^3*s01^6+6*s00^2*s01^7+6*s00*s01^8+s01^9+162*s00^8*s10-108*s00^7*s01*s10-54*s00^6*s01^2*s10+126*s00^5*s01^3*s10+54*s00^4*s01^4*s10-36*s00^3*s01^5*s10-30*s00^2*s01^6*s10-6*s00*s01^7*s10+351*s00^7*s10^2-54*s00^6*s01*s10^2-216*s00^5*s01^2*s10^2-63*s00^4*s01^3*s10^2+45*s00^3*s01^4*s10^2+36*s00^2*s01^5*s10^2+6*s00*s01^6*s10^2+333*s00^6*s10^3+126*s00^5*s01*s10^3-63*s00^4*s01^2*s10^3-114*s00^3*s01^3*s10^3-24*s00^2*s01^4*s10^3+12*s00*s01^5*s10^3+3*s01^6*s10^3+72*s00^5*s10^4+54*s00^4*s01*s10^4+45*s00^3*s01^2*s10^4-24*s00^2*s01^3*s10^4-12*s00*s01^4*s10^4-63*s00^4*s10^5-36*s00^3*s01*s10^5+36*s00^2*s01^2*s10^5+12*s00*s01^3*s10^5-30*s00^3*s10^6-30*s00^2*s01*s10^6+6*s00*s01^2*s10^6+3*s01^3*s10^6+6*s00^2*s10^7-6*s00*s01*s10^7+6*s00*s10^8+s10^9-189*s00^8*s11-270*s00^7*s01*s11-27*s00^6*s01^2*s11+138*s00^5*s01^3*s11+54*s00^4*s01^4*s11-30*s00^3*s01^5*s11-23*s00^2*s01^6*s11-4*s00*s01^7*s11-270*s00^7*s10*s11-513*s00^6*s01*s10*s11-180*s00^5*s01^2*s10*s11+189*s00^4*s01^3*s10*s11+144*s00^3*s01^4*s10*s11+6*s00^2*s01^5*s10*s11-16*s00*s01^6*s10*s11-3*s01^7*s10*s11-27*s00^6*s10^2*s11-180*s00^5*s01*s10^2*s11-162*s00^4*s01^2*s10^2*s11-12*s00^3*s01^3*s10^2*s11+42*s00^2*s01^4*s10^2*s11+12*s00*s01^5*s10^2*s11+138*s00^5*s10^3*s11+189*s00^4*s01*s10^3*s11-12*s00^3*s01^2*s10^3*s11-82*s00^2*s01^3*s10^3*s11-20*s00*s01^4*s10^3*s11+54*s00^4*s10^4*s11+144*s00^3*s01*s10^4*s11+42*s00^2*s01^2*s10^4*s11-20*s00*s01^3*s10^4*s11-6*s01^4*s10^4*s11-30*s00^3*s10^5*s11+6*s00^2*s01*s10^5*s11+12*s00*s01^2*s10^5*s11-23*s00^2*s10^6*s11-16*s00*s01*s10^6*s11-4*s00*s10^7*s11-3*s01*s10^7*s11+81*s00^7*s11^2+54*s00^6*s01*s11^2+18*s00^5*s01^2*s11^2+34*s00^4*s01^3*s11^2+28*s00^3*s01^4*s11^2+9*s00^2*s01^5*s11^2+s00*s01^6*s11^2+54*s00^6*s10*s11^2-126*s00^5*s01*s10*s11^2-114*s00^4*s01^2*s10*s11^2+22*s00^3*s01^3*s10*s11^2+38*s00^2*s01^4*s10*s11^2+8*s00*s01^5*s10*s11^2+18*s00^5*s10^2*s11^2-114*s00^4*s01*s10^2*s11^2-93*s00^3*s01^2*s10^2*s11^2-3*s00^2*s01^3*s10^2*s11^2+14*s00*s01^4*s10^2*s11^2+3*s01^5*s10^2*s11^2+34*s00^4*s10^3*s11^2+22*s00^3*s01*s10^3*s11^2-3*s00^2*s01^2*s10^3*s11^2-4*s00*s01^3*s10^3*s11^2+28*s00^3*s10^4*s11^2+38*s00^2*s01*s10^4*s11^2+14*s00*s01^2*s10^4*s11^2+9*s00^2*s10^5*s11^2+8*s00*s01*s10^5*s11^2+3*s01^2*s10^5*s11^2+s00*s10^6*s11^2+24*s00^6*s11^3+12*s00^5*s01*s11^3-19*s00^4*s01^2*s11^3-18*s00^3*s01^3*s11^3-4*s00^2*s01^4*s11^3+12*s00^5*s10*s11^3-8*s00^4*s01*s10*s11^3-24*s00^3*s01^2*s10*s11^3-13*s00^2*s01^3*s10*s11^3-2*s00*s01^4*s10*s11^3-19*s00^4*s10^2*s11^3-24*s00^3*s01*s10^2*s11^3-15*s00^2*s01^2*s10^2*s11^3-4*s00*s01^3*s10^2*s11^3-18*s00^3*s10^3*s11^3-13*s00^2*s01*s10^3*s11^3-4*s00*s01^2*s10^3*s11^3-s01^3*s10^3*s11^3-4*s00^2*s10^4*s11^3-2*s00*s01*s10^4*s11^3+16*s00^5*s11^4+16*s00^4*s01*s11^4+4*s00^3*s01^2*s11^4+16*s00^4*s10*s11^4+16*s00^3*s01*s10*s11^4+4*s00^2*s01^2*s10*s11^4+4*s00^3*s10^2*s11^4+4*s00^2*s01*s10^2*s11^4+s00*s01^2*s10^2*s11^4

